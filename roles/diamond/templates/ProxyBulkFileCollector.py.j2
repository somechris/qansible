# {{ansible_managed}}
#
# coding=utf-8

"""
Fetches files from hosts that are needed for other proxy collectors
"""

import subprocess
import os
import diamond.collector

class ProxyBulkFileCollector(diamond.collector.Collector):
    def get_config_as_list(self, key):
        value = self.config.get(key, [])
        if not isinstance(value, list):
            value = [value]
        return value

    def process_config(self):
        super(ProxyBulkFileCollector, self).process_config()
        remote_hosts = self.get_config_as_list('remote_hosts')
        self.remote_hosts = [host.split('.')[0] for host in remote_hosts]
        self.files = self.get_config_as_list('files')
        self.proxy_metrics_dir = self.config.get(
            'proxy_metrics_dir',
            '/var/lib/diamond/proxy-metrics')
        self.marker = '//--diamond-metric-proxy--'
        self.marker_start = self.marker + 'START--'
        self.marker_end = self.marker + 'END--'

    def collect_for_host(self, host):
        host_dir = os.path.join(self.proxy_metrics_dir, host)
        if not os.path.isdir(host_dir):
            os.makedirs(host_dir, 0700)

        marker = '//--diamond-metric-proxy--'
        remote_command = []
        for file in self.files:
            remote_command += [
                'echo ' + self.marker_start + file,
                'cat ' + file,
                'echo ' + self.marker_end + file,
                ]

        command = [
            'ssh', '-n',
            'diamond-{{inventory_hostname_short}}-' + host,
            ' ; '.join(remote_command),
            ]
        output = subprocess.check_output(command).decode("utf-8")

        file = None
        try:
            for line in output.split('\n'):
                if line.startswith(self.marker_start):
                    if file:
                        file.close()
                        file = None
                    marked_name = line[len(self.marker_start):]
                    local_name = marked_name.replace(os.sep, '-')
                    file_name = os.path.join(host_dir, local_name)
                    file = open(file_name + '.tmp', 'w')
                elif line.startswith(self.marker_end):
                    file.close()
                    os.rename(file_name + '.tmp', file_name)
                    file = None
                else:
                    if file:
                        file.write(line + '\n')
            if file:
                file.close()
                file = None
        finally:
            if file:
                file.close()
                file = None

    def collect(self):
        for host in self.remote_hosts:
            self.collect_for_host(host)
