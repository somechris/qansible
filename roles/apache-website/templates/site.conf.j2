# {{ansible_managed}}
{% set location_root_shim = ([{'name': '/'}] if (apache_website_locations | selectattr('name', 'equalto', '/') | list | length) == 0 else []) %}
{% set ids = {'sec_rules': ((apache_website_domain | hashing_mod(499)) * 200 + 50000)} %}

{% for prefix in ([''] + (['www.'] if (apache_website_add_www_redirects | bool) else [])) %}
{%   for port in (apache_webserver_ports_plain + (apache_webserver_ports_encrypted if apache_website_is_https else [])) %}

<VirtualHost *:{{port}}>
  ServerName {{prefix}}{{apache_website_domain}}
  DocumentRoot {{web_site_root_dir}}/{{apache_website_domain}}/htdocs/
  ServerSignature Off
  ServerAdmin {{webmaster_email_address}}

{%     set cgi_handler = 'cgi-script' %}
{%     if port in apache_webserver_ports_encrypted %}
{%       set ssl_config = (default_ssl_setup | ssl_config(variant='openssl')) %}
  SSLEngine on
  SSLProtocol -All{%for protocol in ssl_config['protocols']%} +{{protocol}}{%endfor%}

  SSLCertificateChainFile {{ssl_cert_dir}}/{{prefix}}{{apache_website_domain}}__chain.pem
  SSLCertificateFile {{ssl_cert_dir}}/{{prefix}}{{apache_website_domain}}__cert.pem
  SSLCertificateKeyFile {{ssl_private_dir}}/{{prefix}}{{apache_website_domain}}__key_w_dhparam.pem
  SSLHonorCipherOrder on
  SSLCipherSuite {{ssl_config['ciphers']}}

{%     endif %}
{%     if (port in apache_webserver_ports_plain and (apache_website_is_https | bool)) or prefix %}
  Redirect permanent / http{{"s" if apache_website_is_https else ""}}://{{apache_website_domain}}/
{%     else %}
{%       if 'https' in ((location_root_shim + apache_website_locations) | attrs('proxy') | attrs('protocol')) %}
  SSLProxyEngine on
{%       endif %}
{%       if apache_website_rewrites %}
  RewriteEngine on

{%         for rewrite in apache_website_rewrites %}

{%           if (rewrite['description'] | default('')) %}
  # {{rewrite['description']}}
{%           endif %}
{%           for condition in (rewrite['conditions'] | default([])) %}
  RewriteCond {{condition['string']}} {{condition['condition']}}
{%           endfor %}
{%           set rule = rewrite['rule'] %}
  RewriteRule {{rule['from']}} {{rule['to']}}{{(' [' ~ (rule['flags'] | join(',')) ~ ']') if (rule['flags'] | default('')) else ''}}
{%         endfor %}
{%       endif %}
{%       if apache_website_redirects %}

{%         for redirect in apache_website_redirects %}
  Redirect {{redirect['from']}} {{redirect['to']}}
{%         endfor %}
{%       endif %}

  RequestHeader unset {{web_site_authenticated_user_header}}
  RequestHeader unset {{web_site_authenticated_email_header}}
  RequestHeader unset {{web_site_authenticated_display_name_header}}
  RequestHeader unset Authorization

{%       if apache_website_mod_configs['wsgi'] is defined %}
{%         set cgi_handler = 'wsgi-script' %}
{%         for wsgi_option in apache_website_mod_configs['wsgi'] %}
{%           if wsgi_option is starts_with 'WSGI' %}
  {{wsgi_option}}
{%           else %}
#####################################################
Config error!

wsgi option

{{wsgi_option}}

does not start in 'WSGI'
#####################################################
{%           endif %}
{%         endfor %}
{%       endif %}
{%       for location in (location_root_shim + apache_website_locations)%}
{%         set location_type = (location['type'] | default('static')) %}
{%         set location_suffix = '' %}
{%         set location_start_extra = '' %}
{%         set handler = '' %}
{%         if location_type == 'regexp' %}
{%           set location_suffix = 'Match' %}
{%           set location_start_extra = '^' %}
{%         endif %}

  <Location{{location_suffix}} "{{location_start_extra}}{{location['name']}}">
    AuthMerging And
{# ^^^^ makes sure that an ldap-groups (i.e.: Require) on /foo/bar does to    #}
{# reset the net_accesses (i.e.: also Require) set on /foo. With              #}
{# `AuthMerging And` both the ldap-groups and the net-accesses apply to       #}
{# /foo/bar. #}
{%         if (location['auth'] is defined) %}
    AuthType basic
    AuthName "{{apache_website_domain}}"
{%           if (location['auth']['ldap_groups'] is defined) %}
    AuthBasicProvider ldap
    AuthLDAPUrl "{{ldap_server_uri}}/ou={{ldap_server_ou_people}},{{ldap_server_base_dn}}?uid,mail,displayName?one" STARTTLS
{%           endif %}
{%         endif %}
    <RequireAll>
{%         if location['name'] == '/' or (location['net_accesses'] is defined) %}
      # Net-accesses
      <RequireAny>
{%           if location['name'] == '/' and (location['net_accesses'] is defined and location['net_accesses'] != apache_website_net_accesses) %}
#####################################################
Config error!

You have explicitly set net_accesses for / to:

{{location['net_accesses']}}

which does not met the implicit net_accesses for / from apache_website_net_accesses:

{{apache_website_net_accesses}}
#####################################################
{%           endif %}
{%           for remote_range in (location['net_accesses'] | default(apache_website_net_accesses) | net_accesses_to_remote_ranges(net_configs, inventory_hostname, hostvars, notation='netmask')) %}
        Require ip {{remote_range[0]}}/{{remote_range[1]}}
{%           endfor %}

        Require all denied
        # ^ This 'Require all denied' makes sure that at least one rule
        # fails and RequireAny hence cannot return neutral
      </RequireAny>
{%         endif %}
{%         if (location['auth'] is defined) %}
{%           if (location['auth']['ldap_groups'] is defined) %}

      # ldap-groups
      <RequireAny>
{% for ldap_group in location['auth']['ldap_groups'] %}
        Require ldap-group cn={{ldap_group}},ou={{ldap_server_ou_groups}},{{ldap_server_base_dn}}
{% endfor %}
        Require all denied
        # ^ This 'Require all denied' makes sure that at least one rule
        # fails and RequireAny hence cannot return neutral
      </RequireAny>
{%           endif %}
{%         endif %}
{%         if (location['deny'] is defined and (location['deny'] | bool)) %}
      <RequireAll>
        # Force denying all requests
        Require all denied
      </RequireAll>
{%         endif %}
      Require all granted
      # ^ This 'Require all granted' makes sure that at least one rule
      # succeeds, hence RequireAll does not fail if there are no other
      # conditions
    </RequireAll>
    RequestHeader set {{web_site_authenticated_user_header}} %{REMOTE_USER}s
    RequestHeader set {{web_site_authenticated_email_header}} %{AUTHENTICATE_MAIL}e
    RequestHeader set {{web_site_authenticated_display_name_header}} %{AUTHENTICATE_DISPLAYNAME}e

{%         if (location['cors'] | default('')) == 'allow-all-simple' %}

    Header always set Access-Control-Allow-Origin "*"
{%         endif %}
{%         if location["is_cgi"] is defined %}
{%           if location["is_cgi"] | bool %}
    Options ExecCGI
{%             if not handler %}
{%               set handler = cgi_handler %}
{%             endif %}
{%           else %}
    Options -ExecCGI
{%             if not handler %}
{%               set handler = 'None' %}
{%             endif %}
{%           endif %}
{%         endif %}
{%         if location["expose_server_status"] | default(False) | bool %}
{%           set handler = 'server-status' %}
{%         endif %}
{%         if handler %}
    SetHandler {{handler}}
{%         endif %}
{%         if (location['proxy'] | default('')) != '' %}
{%           set proxy = location['proxy'] %}
{%           set protocol = (proxy['protocol'] | default('http')) %}
{%           set host = (proxy['host'] | default('localhost')) %}
{%           set port = proxy['port'] %}
{%           set path = (proxy['path'] | default('/')) %}
    ProxyPreserveHost On
    ProxyPass{{location_suffix}} "{{protocol}}://{{host}}:{{port}}{{path}}"
    ProxyPassReverse "{{protocol}}://{{host}}:{{port}}{{path}}"
    ProxyPassReverseCookieDomain "{{host}}" "{{apache_website_domain}}"
{%           if location['name'] != path %}
    ProxyPassReverseCookiePath "{{path}}" "{{location['name']}}"
{%           endif %}
{%         endif %}
{%         if (location["alias"] | default('')) != '' %}
    # This location has an alias (see below after the Locations)
{# We'd like to include Aliases directly here, but when adding an alias #}
{# within a location, we always end up getting 301s with a trailing     #}
{# appended slash. So for example aliasing to '/bar' within a location  #}
{# '/', then a request to '/foo.html' (although /bar/foo.html is a file #}
{# and exists) get redirected to '/foo.html/'. We've given up on that   #}
{# for now and instead alias after the <Location/>s.                    #}
{%         endif %}
  </Location{{location_suffix}}>
{%       endfor %}
{%       for location in (apache_website_locations | reverse) %}
{%         if (location["alias"] | default('')) != '' %}
{%           if ((location['type'] | default('static')) == 'static') %}
  Alias "{{location["name"]}}" "{{location["alias"]}}"
  <Directory "{{location["alias"]}}">
    # White-listing alias, as it may live outside of the whitelisted /var/www
    Require all granted
  </Directory>
{%           else %}
#####################################################
Config error!

Aliases are only supported for static locations, but "{{location["name"]}}" is "{{location["type"]}}"
#####################################################
{%           endif %}
{%         endif %}
{%       endfor %}
{%     endif %}


  ErrorLog {{web_site_root_dir}}/{{apache_website_domain}}/logs/{{port}}_error.log
  LogLevel warn
  CustomLog {{web_site_root_dir}}/{{apache_website_domain}}/logs/{{port}}_access.log req_v2{{"_anon" if (apache_website_log_anonymously | bool) else ""}}
</VirtualHost>
{%   endfor %}
{% endfor %}

{# Helper for SecRule config #}
{% macro sec_rule(rationale, phase, match, extra_conditions, actions) %}
{%   if not (actions | is_list) %}
{%     if actions == 'standard-deny' %}
{%       set actions = [
           'block',
           'capture',
           't:none',
           "setvar:'tx.anomaly_score_pl1=+%{tx.critical_anomaly_score}'",
           "severity:'CRITICAL'",
           "logdata:'Matched within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}'",
           "deny"
           ] %}
{%     else %}
{%       set actions = [actions] %}
{%     endif %}
{%   endif %}
{%   set first_rule_actions = [
         "id:'" ~ (ids["sec_rules"]) ~ "'",
         "phase:" ~ phase,
         "msg:'" ~ (rationale | replace("'", "_")) ~ "'",
         ] + (actions | select("starts_with_any", [
             "block",
             "deny",
             "pass",
             "id:",
             "logdata:",
             "msg:",
             "nolog",
             "phase:",
             "severity:",
             ]) | list) + [
         "chain",
         ] %}
{%   set last_rule_actions = (actions | select("not_in", first_rule_actions) | list) %}
SecRule REQUEST_HEADERS:Host "@streq {{apache_website_domain}}" "{{first_rule_actions | join(',\\\n    ')}}"
{%   for condition in ([{"targets":["REQUEST_FILENAME"], "operator":match}] + extra_conditions) %}
  SecRule {{condition['targets'] | join('|')}} "{{condition['operator']}}" "{{(last_rule_actions | join(',\\\n    ')) if loop.last else "chain"}}"
{%   endfor %}
{% set ids = (ids | update_dict({'sec_rules': ids['sec_rules'] + 1})) %}
{% endmacro %}
{# #}
{# #}
{% for location in (location_root_shim + apache_website_locations)%}
{%   if (location["security_rules"] | default([]) != []) %}

##############################################################
# SecRules for {{apache_website_domain}}{{location['name']}}
{%     set location_type = (location['type'] | default('static')) %}
{%     set match = "" %}
{%     if (location_type == 'static') %}
{%       if location['name'] is ending_with('/') %}
{%         set match = "@beginsWith " ~ location['name'] %}
{%       else %}
{%         set match = "@streq " ~ location['name'] %}
{%       endif %}
{%     elif (location_type == 'regexp') %}
{%       set match = "@rx ^" ~ location['name'] %}
{%     else %}
#####################################################
Config error!

Unknown location type {{location_type}} for location {{location}} is security rules.
#####################################################
{%     endif %}
{%     for rule in location["security_rules"] %}
{%       set rationale = rule['rationale']%}
#{{rule['type']}}{% for key in ['id', 'variable'] %}{% if key in rule %} {{key}}:{{rule[key]}}{% endif %}{% endfor %} rationale: {{rationale}}
{%       if rule['type'] == 'remove-target' %}
{%         for target in rule['targets'] %}
{{           sec_rule(rationale, 1, match, [], ["nolog", "ctl:ruleRemoveTargetById=" ~ rule['id'] ~ ";" ~ target]) }}
{%         endfor %}
{%       elif rule['type'] == 'add-rule' %}
{{         sec_rule(rationale, 2, match, [{'targets': rule['targets'], 'operator': rule['operator']}], rule['actions']) }}
{%       elif rule['type'] == 'set-variable' %}
{{         sec_rule(rationale, 1, match, [], ['pass', 't:none', 'nolog', "setvar:'" + rule['variable'] + "=" + rule['value'] + "'"]) }}
{%       elif rule['type'] == 'append-to-variable' %}
{{         sec_rule(rationale, 1, match, [], ['pass', 't:none', 'nolog', "setvar:'" + rule['variable'] + "=%{" + rule['variable'] + "} " + rule['value'] + "'"]) }}
{%       else %}
ERROR: Unknown type {{rule['type']}} for security rule {{rule}}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}
