# {{ansible_managed}}
{% set location_root_shim = ([{'name': '/'}] if (apache_website_locations | selectattr('name', 'equalto', '/') | list | length) == 0 else []) %}
{% set ids = {'sec_rules': ((apache_website_domain | hashing_mod(499)) * 200 + 50000)} %}

{% for prefix in ([''] + (['www.'] if (apache_website_add_www_redirects | bool) else [])) %}
{%   for port in (apache_webserver_ports_plain + (apache_webserver_ports_encrypted if apache_website_is_https else [])) %}

<VirtualHost *:{{port}}>
  ServerName {{prefix}}{{apache_website_domain}}
  DocumentRoot {{web_site_root_dir}}/{{apache_website_domain}}/htdocs/
  ServerSignature Off
  ServerAdmin {{webmaster_email_address}}

{%     if (port in apache_webserver_ports_plain and (apache_website_is_https | bool)) or prefix %}
  Redirect permanent / http{{"s" if apache_website_is_https else ""}}://{{apache_website_domain}}/
{%     else %}
{%       if port in apache_webserver_ports_encrypted %}
{%         set ssl_config = (default_ssl_setup | ssl_config(variant='openssl')) %}
  SSLEngine on
  SSLProtocol -All{%for protocol in ssl_config['protocols']%} +{{protocol}}{%endfor%}

  SSLCertificateChainFile {{ssl_cert_dir}}/{{apache_website_domain}}__chain.pem
  SSLCertificateFile {{ssl_cert_dir}}/{{apache_website_domain}}__cert.pem
  SSLCertificateKeyFile {{ssl_private_dir}}/{{apache_website_domain}}__key_w_dhparam.pem
  SSLHonorCipherOrder on
  SSLCipherSuite {{ssl_config['ciphers']}}

{%       endif %}
{%       if apache_website_rewrites %}
  RewriteEngine on

{%         for rewrite in apache_website_rewrites %}

{%           if (rewrite['description'] | default('')) %}
  # {{rewrite['description']}}
{%           endif %}
{%           for condition in (rewrite['conditions'] | default([])) %}
  RewriteCond {{condition['string']}} {{condition['condition']}}
{%           endfor %}
{%           set rule = rewrite['rule'] %}
  RewriteRule {{rule['from']}} {{rule['to']}}{{(' [' ~ (rule['flags'] | join(',')) ~ ']') if (rule['flags'] | default('')) else ''}}
{%         endfor %}
{%       endif %}
{%       if apache_website_redirects %}

{%         for redirect in apache_website_redirects %}
  Redirect {{redirect['from']}} {{redirect['to']}}
{%         endfor %}
{%       endif %}

{%       for location in (location_root_shim + apache_website_locations)%}
{%         set location_type = (location['type'] | default('static')) %}
{%         set location_suffix = '' %}
{%         set location_start_extra = '' %}
{%         if location_type == 'regexp' %}
{%           set location_suffix = 'Match' %}
{%           set location_start_extra = '^' %}
{%         endif %}

  <Location{{location_suffix}} "{{location_start_extra}}{{location['name']}}">
    <RequireAny>
{%         if location['name'] == '/' and (location['net_accesses'] is defined and location['net_accesses'] != apache_website_net_accesses) %}
#####################################################
Config error!

You have explicitly set net_accesses for / to:

{{location['net_accesses']}}

which does not met the implicit net_accesses for / from apache_website_net_accesses:

{{apache_website_net_accesses}}
#####################################################
{%         endif %}
{%         for remote_range in (location['net_accesses'] | default(apache_website_net_accesses) | net_accesses_to_remote_ranges(net_configs, inventory_hostname, hostvars, notation='netmask')) %}
      Require ip {{remote_range[0]}}/{{remote_range[1]}}
{%         endfor %}

      Require all denied
      # ^ This 'Require all denied' makes sure that at least one rule
      # fails and RequireAny hence cannot return neutral
    </RequireAny>
{%         if (location['cors'] | default('')) == 'allow-all-simple' %}

    Header always set Access-Control-Allow-Origin "*"
{%         endif %}
{%         if location["is_cgi"] | default(False) | bool %}

    Options ExecCGI
    SetHandler cgi-script
{%         endif %}
  </Location{{location_suffix}}>
{%       endfor %}
{%     endif %}


  ErrorLog {{web_site_root_dir}}/{{apache_website_domain}}/logs/{{port}}_error.log
  LogLevel warn
  CustomLog {{web_site_root_dir}}/{{apache_website_domain}}/logs/{{port}}_access.log req_v2{{"_anon" if (apache_website_log_anonymously | bool) else ""}}
</VirtualHost>
{%   endfor %}
{% endfor %}

{# Helper for SecRule config #}
{% macro sec_rule(rationale, phase, match, extra_conditions, actions) %}
{%   if not (actions | is_list) %}
{%     if actions == 'standard-deny' %}
{%       set actions = [
           'block',
           'capture',
           't:none',
           "setvar:'tx.anomaly_score_pl1=+%{tx.critical_anomaly_score}'",
           "severity:'CRITICAL'",
           "logdata:'Matched within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}'",
           "deny"
           ] %}
{%     else %}
{%       set actions = [actions] %}
{%     endif %}
{%   endif %}
{%   set first_rule_actions = [
         "id:'" ~ (ids["sec_rules"]) ~ "'",
         "phase:" ~ phase,
         "msg:'" ~ (rationale | replace("'", "_")) ~ "'",
         ] + (actions | select("starts_with_any", [
             "block",
             "deny",
             "id:",
             "logdata:",
             "msg:",
             "nolog",
             "phase:",
             "severity:",
             ]) | list) + [
         "chain",
         ] %}
{%   set last_rule_actions = (actions | select("not_in", first_rule_actions) | list) %}
SecRule REQUEST_HEADERS:Host "@streq {{apache_website_domain}}" "{{first_rule_actions | join(',\\\n    ')}}"
{%   for condition in ([{"targets":["REQUEST_FILENAME"], "operator":match}] + extra_conditions) %}
  SecRule {{condition['targets'] | join('|')}} "{{condition['operator']}}" "{{(last_rule_actions | join(',\\\n    ')) if loop.last else "chain"}}"
{%   endfor %}
{% set ids = (ids | update_dict({'sec_rules': ids['sec_rules'] + 1})) %}
{% endmacro %}
{# #}
{# #}
{% for location in (location_root_shim + apache_website_locations)%}
{%   if (location["security_rules"] | default([]) != []) %}

##############################################################
# SecRules for {{apache_website_domain}}{{location['name']}}
{%     set location_type = (location['type'] | default('static')) %}
{%     set match = "" %}
{%     if (location_type == 'static') %}
{%       set match = "@streq " ~ location['name'] %}
{%     elif (location_type == 'regexp') %}
{%       set match = "@rx ^" ~ location['name'] %}
{%     else %}
#####################################################
Config error!

Unknown location type {{location_type}} for location {{location}} is security rules.
#####################################################
{%     endif %}
{%     for rule in location["security_rules"] %}
{%       set rationale = rule['rationale']%}
#{{rule['type']}} id:{{rule['id']|default('')}} rationale: {{rationale}}
{%       if rule['type'] == 'remove-target' %}
{%         for target in rule['targets'] %}
{{           sec_rule(rationale, 1, match, [], ["nolog", "ctl:ruleRemoveTargetById=" ~ rule['id'] ~ ";" ~ target]) }}
{%         endfor %}
{%       elif rule['type'] == 'add-rule' %}
{{         sec_rule(rationale, 2, match, [{'targets': rule['targets'], 'operator': rule['operator']}], rule['actions']) }}
{%       else %}
ERROR: Unknown type {{rule['type']}} for security rule {{rule}}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}
