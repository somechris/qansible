- name: Drop-out for unsupported distributions
  fail: msg="Unsupported distribution '{{qhost_distribution}}' in '{{role_path|basename}}' role"
  when: 'qhost_distribution not in ["Debian"]'

- name: Preseed ldap domain
  debconf:
    name: slapd
    question: slapd/domain
    vtype: string
    # Not using company_domain or similar variables, since this value
    # should really be built from the ldap_server_base_dn itself. This is
    # needed to make sure modifications of ldap_server_base_dn variable flow
    # into the right places
    value: '{{ldap_server_base_dn | regex_replace(",", ".") | regex_replace("dc=", "") }}'

- name: Install ldap packages
  apt:
    name:
      - slapd
      - ldap-utils
      - ldapscripts
      - python-ldap # Needed only for Ansible's LDAP modules
    state: present

- name: Make sure openldap user can access certs
  user:
    state: present
    name: openldap
    append: yes
    createhome: no
    groups: ssl-cert

- name: Create init script defaults
  template:
    dest: '/etc/default/slapd'
    src: 'slapd-defaults.conf.j2'
    owner: root
    group: root
    mode: 0444
  notify:
    - reload slapd

- name: Load credentials
  include_vars: credentials.yml

- name: Injecting LDAP configuration
  ldap_attr:
    dn: "{{item['dn']}}"
    name: "{{item['name']}}"
    values: "{{item['values']}}"
    state: exact
  with_items:
    - {dn: cn=config, name: olcLogLevel, values: '{{ldap_server_log_level}}' }
    - {dn: cn=config, name: olcTLSDHParamFile, values: '{{dhparams_file}}' }
    - {dn: cn=config, name: olcTLSCACertificateFile, values: '{{ssl_cert_dir}}/{{ldap_server_host}}__chain.pem' }
    - {dn: cn=config, name: olcTLSCertificateFile, values: '{{ssl_cert_dir}}/{{ldap_server_host}}__cert.pem' }
    - {dn: cn=config, name: olcTLSCertificateKeyFile, values: '{{ssl_private_dir}}/{{ldap_server_host}}__key.pem' }
    - {dn: cn=config, name: olcLocalSSF, values: 256 }
    - {dn: cn=config, name: olcSaslSecProps, values: 'noplain,minssf=256' }
    - {dn: cn=config, name: olcSecurity, values: 'ssf=256' }
    - {dn: cn=config, name: olcTLSCipherSuite, values: "{{(ldap_server_ssl_type | ssl_config('gnutls'))['ciphers']}}" }
    - {dn: 'olcDatabase={-1}frontend,cn=config', name: olcPasswordHash, values: "{{'{'}}{{ldap_server_password_scheme}}}" }
    - {dn: 'olcDatabase={1}mdb,cn=config', name: olcRootPW, values: "{{ldap_server_admin_password | mkpasswd(ldap_server_admin_salt, method=ldap_server_password_scheme)}}" }
    - {dn: 'olcDatabase={1}mdb,cn=config', name: olcDbIndex, values: ['default pres,eq,sub', 'uid,cn,givenName,sn,email,memberUid', 'objectClass eq']}
  notify:
    - reload slapd

- name: Getting configured schemas
  command: ldapsearch -Q -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' cn
  changed_when: False
  register: ldap_server_reg_schemas

- name: Injecting missing schema
  ldap_entry:
    dn: "cn={{item['cn']}},cn=schema,cn=config"
    objectClass: olcSchemaConfig
    attributes: "{{item['attributes']}}"
    state: present
  when: "not (ldap_server_reg_schemas['stdout_lines'] | select('ending_with', '}' + item['cn']) | list)"
  with_items: '{{ldap_server_extra_schemas}}'

- name: Setting access with root
  ldap_attr:
    dn: "olcDatabase={1}mdb,cn=config"
    name: "olcAccess"
    values: "{{['to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth write'] + (ldap_server_mdb_access | prepend_all_items('to '))}}"
    state: exact
  changed_when: False

- name: Configuring base
  ldap_attr:
    dn: "{{ldap_server_base_dn}}"
    name: "o"
    values: "{{ldap_server_organization}}"
    state: exact
  notify:
    - reload slapd

- name: Creating ou entities
  ldap_entry:
    dn: 'ou={{item}},{{ldap_server_base_dn}}'
    objectClass: organizationalUnit
    state: present
  with_items:
    - '{{ldap_server_ou_people}}'
    - '{{ldap_server_ou_groups}}'
    - '{{ldap_server_ou_machines}}'
    - '{{ldap_server_ou_services}}'
  notify:
    - reload slapd

- name: Setting access without root
  ldap_attr:
    dn: "olcDatabase={1}mdb,cn=config"
    name: "olcAccess"
    values: "{{(ldap_server_mdb_access | prepend_all_items('to '))}}"
    state: exact
  changed_when: False

# Loading the member module if it is loaded already will fail. Hence,
# we have to check if it is already there before trying to add it
- name: Check if the memberof module is loaded
  command: ldapsearch -Q -Y EXTERNAL -H ldapi:/// -LLL -b 'cn=module{0},cn=config' olcModuleLoad
  changed_when: False
  register: ldap_server_reg_memberof_loading

- name: Setup loading of memberof module
  ldap_attr:
    dn: 'cn=module{0},cn=config'
    name: olcModuleLoad
    values: "memberof"
    state: present
  when: '"memberof" not in ldap_server_reg_memberof_loading.stdout'
  notify:
    - reload slapd

# The memberof module can be added more than once to mdb. Hence, we have
# to check if it is already there before trying to add it
- name: Check if the memberof module is included in mdb
  command: ldapsearch -Q -Y EXTERNAL -H ldapi:/// -LLL -b 'olcDatabase={1}mdb,cn=config' olcOverlay
  changed_when: False
  register: ldap_server_reg_memberof_overlaying

- name: Setup memberof overlay
  ldap_entry:
    dn: olcOverlay=memberof,olcDatabase={1}mdb,cn=config
    objectClass:
      - olcConfig
      - olcMemberOf
      - olcOverlayConfig
    state: present
  when: '"memberof" not in ldap_server_reg_memberof_overlaying.stdout'
  notify:
    - reload slapd

- name: Enforce permission on ldapscripts password file
  # We only enforce sane permissions. But we do not actually set the
  # password, as we do not want to have the password lying around on
  # the host the whole time.
  file:
    path: /etc/ldapscripts/ldapscripts.passwd
    owner: root
    group: root
    mode: 0600

- name: Enforce permission on ldapscripts log file
  file:
    path: '{{ldap_server_ldapscripts_log_file}}'
    owner: root
    group: root
    mode: 0640

- name: Copy ldapscripts templates
  template:
    dest: '/etc/ldapscripts/{{item}}.template'
    src: '{{item}}.template'
    owner: root
    group: root
    mode: 0444
  with_items:
    - group
    - user
    - machine

- name: Configure ldapscripts
  template:
    dest: /etc/ldapscripts/ldapscripts.conf
    src: ldapscripts.conf.j2
    owner: root
    group: root
    mode: 0400

- name: Render own ldap helpers
  template:
    dest: '/usr/bin/ldapsetsshkey'
    src: 'ldapsetsshkey.sh.j2'
    owner: root
    group: root
    mode: 0544

- name: Bring backup script into place
  template:
    dest: /usr/bin/dump-ldap-backup
    src: dump-backup.sh.j2
    owner: root
    group: root
    mode: 0555
  tags:
    - backup

- name: Configuring backup
  set_fact:
    backup_configs: '{{(backup_configs | default([])) + [{"kind": "ldap", "suffix": "ldif"}] }}'
  changed_when: False
  tags:
    - always

- name: Updating port config
  set_fact:
    firewall_late_port_config: '{{firewall_late_port_config | default({}) | update_dict({
      ldap_server_port: {
        "name": "LDAP",
        "protocol": "tcp",
        "incoming_net_accesses": ldap_server_net_accesses,
      }
    }, merge_lists=True)}}'
  changed_when: False
  tags:
    - always
