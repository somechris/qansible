# {{ansible_managed}}
#
#  Copyright (C) 2005 Ganaël LAPLANCHE - Linagora
#  Copyright (C) 2006-2013 Ganaël LAPLANCHE
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.

# Note for Debian users:
# On Debian system ldapscripts will try to parse and use nslcd config.
# Look on commented variables and description lines started with DEBIAN.
# But you could override it's values here.


# LDAP server
# DEBIAN: value from /etc/nslcd.conf (uri) is used.
#SERVER="ldap://localhost"
SERVER="{{ldap_server_uri}}"

# Suffixes
# DEBIAN: values from /etc/nslcd.conf (base maps) are used.
#SUFFIX="dc=example,dc=com" # Global suffix
#GSUFFIX="ou=Groups"        # Groups ou (just under $SUFFIX)
#USUFFIX="ou=Users"         # Users ou (just under $SUFFIX)
#MSUFFIX="ou=Machines"      # Machines ou (just under $SUFFIX)
SUFFIX="{{ldap_server_base_dn}}" # Global suffix
GSUFFIX="ou={{ldap_server_ou_groups}}"        # Groups ou (just under $SUFFIX)
USUFFIX="ou={{ldap_server_ou_people}}"         # Users ou (just under $SUFFIX)
MSUFFIX="ou={{ldap_server_ou_machines}}"      # Machines ou (just under $SUFFIX)

# Authentication type
# DEBIAN: value from /etc/nslcd.conf (sasl_mech) is used.
# If empty, use simple authentication
# Else, use the value as an SASL authentication mechanism
#SASLAUTH=""
#SASLAUTH="GSSAPI"

# Simple authentication parameters
# The following BIND* parameters are ignored if SASLAUTH is set
#BINDDN="cn=Manager,dc=example,dc=com"
BINDDN="cn=admin,{{ldap_server_base_dn}}"
# The following file contains the raw password of the BINDDN
# Create it with something like : echo -n 'secret' > $BINDPWDFILE
# WARNING !!!! Be careful not to make this file world-readable
BINDPWDFILE="/etc/ldapscripts/ldapscripts.passwd"
# For older versions of OpenLDAP, it is still possible to use
# unsecure command-line passwords by defining the following option
# AND commenting the previous one (BINDPWDFILE takes precedence)
#BINDPWD="secret"

# Start with these IDs *if no entry found in LDAP*
GIDSTART="10000" # Group ID
UIDSTART="{{ldap_server_uid_start}}" # User ID
MIDSTART="20000" # Machine ID

# Group membership management
# ObjectCLass used for groups
# Possible values : posixGroup, groupOfNames, groupOfUniqueNames (case-sensitive !)
# Warning : when using groupOf*, be sure to be compliant with RFC 2307bis (AUXILIARY posixGroup).
# Also, do not mix posixGroup and groupOf* entries up in you directory as, within RFC 2307bis,
# the former is a subset of the latter. The ldapscripts wouldn't cope well with this configuration.
#GCLASS="posixGroup"   # Leave "posixGroup" here if not sure !
GCLASS="groupOfNames"
# When using  groupOfNames or groupOfUniqueNames, creating a group requires an initial
# member. Specify it below, you will be able to remove it once groups are populated.
#GDUMMYMEMBER="uid=dummy,$USUFFIX,$SUFFIX"
GDUMMYMEMBER="uid=dummy,$USUFFIX,$SUFFIX"

# User properties
# DEBIAN: values from /etc/adduser.conf are used.
#USHELL="/bin/sh"
#UHOMES="/home/%u"     # You may use %u for username here
CREATEHOMES="no"      # Create home directories and set rights ?
#HOMESKEL="/etc/skel"  # Directory where the skeleton files are located. Ignored if undefined or nonexistant.
#HOMEPERMS="755"       # Default permissions for home directories

# User passwords generation
# Command-line used to generate a password for added users.
# You may use %u for username here ; special value "<ask>" will ask for a password interactively
# WARNING    !!!! This is evaluated, everything specified here will be run !
# WARNING(2) !!!! Some systems (Linux) use a blocking /dev/random (waiting for enough entropy).
#                 In this case, consider using /dev/urandom instead.
#PASSWORDGEN="cat /dev/random | LC_ALL=C tr -dc 'a-zA-Z0-9' | head -c8"
#PASSWORDGEN="pwgen"
#PASSWORDGEN="echo changeme"
#PASSWORDGEN="echo %u"
#PASSWORDGEN="<ask>"
#PASSWORDGEN="pwgen"
PASSWORDGEN="<ask>"

# User passwords recording
# you can keep trace of generated passwords setting PASSWORDFILE and RECORDPASSWORDS
# (useful when performing a massive creation / net rpc vampire)
# WARNING !!!! DO NOT FORGET TO DELETE THE GENERATED FILE WHEN DONE !
# WARNING !!!! DO NOT FORGET TO TURN OFF RECORDING WHEN DONE !
RECORDPASSWORDS="no"
PASSWORDFILE="/var/log/ldapscripts_passwd.log"

# Where to log : local file and/or syslog
LOGTOFILE="yes"
LOGFILE="{{ldap_server_ldapscripts_log_file}}"
LOGTOSYSLOG="yes"
SYSLOGFACILITY="local4"
SYSLOGLEVEL="info"


# Temporary folder
#TMPDIR="/tmp"

# Various binaries used within the scripts
# Warning : they also use uuencode, date, grep, sed, cut, which...
# Please check they are installed before using these scripts
# Note that many of them should come with your OS

# OpenLDAP client commands
LDAPSEARCHBIN="/usr/bin/ldapsearch"
LDAPADDBIN="/usr/bin/ldapadd"
LDAPDELETEBIN="/usr/bin/ldapdelete"
LDAPMODIFYBIN="/usr/bin/ldapmodify"
LDAPMODRDNBIN="/usr/bin/ldapmodrdn"
LDAPPASSWDBIN="/usr/bin/ldappasswd"

# OpenLDAP client common additional options
# This allows for adding more configuration options to the OpenLDAP clients, e.g. '-ZZ' to enforce TLS
#LDAPBINOPTS="-ZZ"
LDAPBINOPTS="-ZZ"

# OpenLDAP ldapsearch-specific additional options
# The following option disables long-line wrapping (which makes the scripts bug
# when handling long lines). The option was introduced in OpenLDAP 2.4.24, so
# comment it if you are using OpenLDAP < 2.4.24.
LDAPSEARCHOPTS="-o ldif-wrap=no"
# And here is an example to activate paged results
#LDAPSEARCHOPTS="-E pr=500/noprompt"

# Character set conversion : $ICONVCHAR <-> UTF-8
# Comment ICONVBIN to disable UTF-8 conversion
#ICONVBIN="/usr/bin/iconv"
#ICONVCHAR="ISO-8859-15"

# Base64 decoding
# Comment UUDECODEBIN to disable Base64 decoding
#UUDECODEBIN="/usr/bin/uudecode"

# Getent command to use - choose the ones used
# on your system. Leave blank or comment for auto-guess.
# GNU/Linux
#GETENTPWCMD="getent passwd"
#GETENTGRCMD="getent group"
# FreeBSD
#GETENTPWCMD="pw usershow"
#GETENTGRCMD="pw groupshow"
# Auto
GETENTPWCMD=""
GETENTGRCMD=""

# You can specify custom LDIF templates here
# Leave empty to use default templates
# See *.template.sample for default templates
#GTEMPLATE="/path/to/ldapaddgroup.template"
#UTEMPLATE="/path/to/ldapadduser.template"
#MTEMPLATE="/path/to/ldapaddmachine.template"
GTEMPLATE="/etc/ldapscripts/group.template"
UTEMPLATE="/etc/ldapscripts/user.template"
MTEMPLATE="/etc/ldapscripts/machine.template"

bailout() {
    local VAR="$1"

    echo "---------------------------------------------------------------" >&2
    echo "The environment variable $VAR is not set." >&2
    echo "Please set it to the person's given name and re-run the command" >&2
    echo "---------------------------------------------------------------" >&2

    # When bailout is called, we're in a pipe without pipefail. Hence
    # a plain exit won't help abort the pipe. However, as the cat
    # should output an LDIF, we just output an malformed LDIF. This
    # makes the pipeline abort
    echo ECHO_INVALID_LDIF_WHICH_CAUSES_EXIT

    exit 1
}

# We want to enforce setting GIVENNAME and SURNAME and inject them into the
# templates. This is not possible directly, hence we hi-jack 'cat'.
cat() {
    if [ "$1" = "$UTEMPLATE" ]
    then
        # We're adding a user, hence enforce that GIVENNAME and SURNAME are set.
        if [ -z "$GIVENNAME" ]
        then
            bailout GIVENNAME
        fi
        if [ -z "$SURNAME" ]
        then
            bailout SURNAME
        fi
    fi

    /bin/cat "$@" | sed \
        -e "s|<givenname>|${GIVENNAME}|g" \
        -e "s|<givenname_lower>|\\L${GIVENNAME}|g" \
        -e "s|<surname>|${SURNAME}|g" \
        -e "s|<surname_lower>|\\L${SURNAME}|g" \

}


# Since posixGroup is structural, and we do not want to force moving
# to 2307bis, we patch up finding the next gid to use
# auxiliaryPosixGroup.
_findnextgid () {
  _NEXTGID=$(_ldapsearch "$GSUFFIX,$SUFFIX" '(objectClass=auxiliaryPosixGroup)' gidNumber | grep "gidNumber: " | sed "s|gidNumber: ||" | uniq | sort -n | tail -n 1)
  if [ -z "$_NEXTGID" ] || [ "$_NEXTGID" -lt "$GIDSTART" ]
  then
    _NEXTGID="$GIDSTART"
  else
    _NEXTGID=$(($_NEXTGID + 1))
  fi

  # Is this ID free ?
  _TMPGID=$(_gidtogroup "$_NEXTGID")
  while [ -n "$_TMPGID" ]
  do
    _NEXTGID=$(($_NEXTGID + 1))
    _TMPGID=$(_gidtogroup "$_NEXTGID")
  done

  unset _TMPGID
  echo "$_NEXTGID"
  unset _NEXTGID
}
